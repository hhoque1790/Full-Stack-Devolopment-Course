SELECT name, genre, year
FROM movies;

SELECT imdb_rating AS 'IMDb' 
FROM movies;
This returns selected data wit renamed column title

SELECT DISTINCT year 
FROM movies;
This filters out all duplicate values in the specified column(s)

SELECT *
FROM movies
WHERE year > 2014;

SELECT * 
FROM movies
WHERE name LIKE 'Se_en';
The _ means you can substitute any individual character.
LIKE can be a useful operator when you want to compare similar values.

SELECT * 
FROM movies
WHERE name LIKE 'The %';
LIKE is not case sensitive
% is a wildcard character that matches zero or more missing letters in the pattern. For example:
eg.
A% matches all movies with names that begin with letter ‘A’
%a matches all movies that end with ‘a’

SELECT *
FROM movies
WHERE year BETWEEN 1970 AND 1979;

SELECT *
FROM movies
WHERE year < 1985
   AND genre = 'horror';

SELECT *
FROM movies
WHERE genre = 'romance'
   OR genre = 'comedy';

SELECT name, year, imdb_rating
FROM movies
ORDER BY imdb_rating DESC;

SELECT *
FROM movies
ORDER BY imdb_rating DESC
LIMIT 3;
This limits no of  rows in result set. always goes at the end of query

SELECT name,
 CASE
  WHEN genre = 'romance' THEN 'Chill'
  WHEN genre = 'comedy'  THEN 'Chill'
  ELSE 'Intense'
 END AS 'Mood'
FROM movies;
A CASE statement allows us to create different outputs 
(usually in the SELECT statement). It is SQL’s way of handling if-then logic.